{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["ContactForm","state","name","number","checkName","props","contacts","map","contact","toLowerCase","includes","onSubmit","event","preventDefault","alert","reset","setState","handleInputChange","currentInput","target","value","this","action","type","onChange","pattern","title","required","className","React","Component","Filter","ContactList","removeContact","id","onClick","App","filter","handleFilterChange","prevState","addContact","newContact","shortid","generate","contactFilter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5c0b944.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport \"./ContactForm.css\";\r\n\r\nclass ContactForm extends React.Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  checkName = (name) => {\r\n    return this.props.contacts\r\n      .map((contact) => contact.name.toLowerCase())\r\n      .includes(name.toLowerCase());\r\n  };\r\n\r\n  onSubmit = (event) => {\r\n    const { name } = this.state;\r\n\r\n    event.preventDefault();\r\n    if (this.checkName(name)) {\r\n      alert(`${name} is already in contacts.`);\r\n      return;\r\n    }\r\n    this.props.onSubmit(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const currentInput = event.target.name;\r\n    this.setState({\r\n      [currentInput]: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { onSubmit, handleInputChange } = this;\r\n    const { number, name } = this.state;\r\n    return (\r\n      <form action=\"\" onSubmit={onSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={handleInputChange}\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            onChange={handleInputChange}\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className=\"btn\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport \"./Filter.css\";\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <div className=\"filter-container\">\r\n      <label className=\"filter-lable\">\r\n        Find contacts by name\r\n        <input\r\n          className=\"filter-input\"\r\n          value={value}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          required\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import PropTypes from \"prop-types\";\r\nimport \"./ContactList.css\";\r\n\r\nconst ContactList = ({ contacts, removeContact }) => {\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ name, number, id }) => {\r\n        return (\r\n          <li key={id}>\r\n            <span className=\"name\"> {name}:</span>\r\n            <span className=\"tel\"> {number}</span>\r\n            <button\r\n              type=\"button\"\r\n              className=\"contact-btn btn\"\r\n              onClick={() => removeContact(id)}\r\n            >\r\n              Удалить\r\n            </button>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  removeContact: PropTypes.func,\r\n};\r\n\r\nexport default ContactList;\r\n","import React from \"react\";\nimport \"./style.css\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\n// const shortid = require(\"shortid\");\nimport shortid from \"shortid\";\n\nclass App extends React.Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  handleFilterChange = (event) => {\n    this.setState({\n      filter: event.target.value,\n    });\n  };\n\n  removeContact = (id) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter((contact) => contact.id !== id),\n    }));\n  };\n\n  addContact = ({ name, number }) => {\n    const newContact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n    this.setState((prevState) => ({\n      contacts: [...prevState.contacts, newContact],\n    }));\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const { addContact, handleFilterChange } = this;\n    const contactFilter = contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n    return (\n      <div className=\"container\">\n        <h1>Phoneboock</h1>\n        <ContactForm onSubmit={addContact} contacts={this.state.contacts} />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={handleFilterChange} />\n        <ContactList\n          contacts={contactFilter}\n          removeContact={this.removeContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}